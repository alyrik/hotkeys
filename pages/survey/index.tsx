import React, { useState } from 'react';
import type { GetServerSideProps, NextPage } from 'next';
import Head from 'next/head';
import { Button, Container, Loading, Row, Spacer } from '@nextui-org/react';
import { v4 as uuidv4 } from 'uuid';

import styles from './SurveyPage.module.css';
import Slide from '@/components/Slide/Slide';
import { FormValue } from '@/models/FormValue';
import { CookieKey } from '@/models/CookieKey';
import { buildUserIdCookie } from '@/helpers/buildCookie';
import { IMAGE_HOST, screenMapping } from '@/config/config';
import { useSaveIndividualAnswer } from '@/mutations/hooks/useSaveIndividualAnswer';

interface ISurveyPageProps {
  initialScreen: number;
  userId: string;
}

const SurveyPage: NextPage<ISurveyPageProps> = ({ initialScreen, userId }) => {
  const [screenNumber, setScreenNumber] = useState(initialScreen);
  const [formValue, setFormValue] = useState('');

  const screenData = screenMapping[screenNumber];
  const screenEntries = Object.entries(screenMapping);
  const totalScreenCount = screenEntries.length;
  const finalScreen = screenNumber > totalScreenCount;

  const { mutate: saveIndividualAnswer, isLoading } = useSaveIndividualAnswer();

  // TODO: custom prepare analytics button

  function handleStartButtonClick() {
    setScreenNumber(1);
  }

  function handleSubmitButtonClick() {
    saveIndividualAnswer(
      {
        questionId: screenNumber,
        answer: formValue,
      },
      {
        onSuccess() {
          setFormValue('');
          setScreenNumber(screenNumber + 1);
        },
        onError(e) {
          // TODO: render error
        },
      },
    );
  }

  function renderResult() {
    if (screenNumber === 0) {
      return (
        <Container style={{ padding: 0 }}>
          <Row>
            <Button color="gradient" size="xl" onClick={handleStartButtonClick}>
              Take survey!
            </Button>
          </Row>
        </Container>
      );
    }

    if (!finalScreen) {
      return (
        <>
          <Slide
            key={screenNumber}
            id={screenNumber}
            title={screenData.title}
            subTitle={screenData.subTitle}
            imageSrc={`${IMAGE_HOST}${screenData.imageSrc}`}
            formValue={formValue}
            isLoading={isLoading}
            onFormChange={(value: FormValue) => setFormValue(value)}
          />
          <Spacer y={2} />
          <Button
            color="primary"
            size="xl"
            disabled={!formValue}
            onClick={handleSubmitButtonClick}
            clickable={!isLoading}>
            {isLoading ? <Loading color="white" /> : 'Submit'}
          </Button>
        </>
      );
    }
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Very hot keys</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <link rel="preconnect" href={IMAGE_HOST} />
        {screenEntries
          .slice(screenNumber, screenNumber + 3)
          .map(([key, value]) => (
            <link
              key={key}
              rel="prefetch"
              href={IMAGE_HOST + value.imageSrc}
              as="image"
            />
          ))}
      </Head>
      <section className={styles.main}>{renderResult()}</section>
    </div>
  );
};

export const getServerSideProps: GetServerSideProps<ISurveyPageProps> = async ({
  req,
  res,
}) => {
  const initialUserId = req.cookies[CookieKey.UserId];
  const userId = initialUserId ?? uuidv4();
  const initialScreen = 0; // TODO: use expirable user cookie to define screen

  if (!initialUserId) {
    res.setHeader(
      'Set-Cookie',
      buildUserIdCookie(userId, process.env.NODE_ENV === 'production'),
    );
  }

  return {
    props: {
      initialScreen,
      userId,
    },
  };
};

export default SurveyPage;
