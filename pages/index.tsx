import { useEffect, useRef, useState } from 'react';
import type { GetServerSideProps, NextPage } from 'next';
import Head from 'next/head';
import io from 'socket.io-client';
import { Button } from '@nextui-org/react';

import styles from '../styles/Home.module.css';
import { SocketEvent } from '../models/SocketEvent';
import countService from '../services/countService';
import Slide from '../components/Slide/Slide';
import { FormValue } from '../models/FormValue';

const IMAGE_HOST = 'https://hotkeys-gifs.s3.eu-central-1.amazonaws.com/';
const SHIFT_NOTE = '+ Shift to enable Selection';

const screenMapping: Record<
  number,
  { imageSrc: string; title: string; subTitle?: string }
> = {
  1: {
    imageSrc: 'Move+Caret+to+Previous%3ANext+Word.gif',
    title: 'Move Caret to Previous/Next Word',
    subTitle: SHIFT_NOTE,
  },
  2: {
    imageSrc: 'Move+Caret+to+Line+Start%3AEnd.gif',
    title: 'Move Caret to Line Start/End',
    subTitle: SHIFT_NOTE,
  },
  3: {
    imageSrc: 'Select+Single+Line+at+Caret.gif',
    title: 'Select Single Line at Caret',
  },
  4: {
    imageSrc: 'Extend%3AShrink+Selection.gif',
    title: 'Extend/Shrink Selection',
  },
  5: {
    imageSrc: 'Add%3ARemove+Selection+for+Next+Occurrence.gif',
    title: 'Add/Remove Selection for Next Occurrence',
  },
  6: {
    imageSrc: 'Delete+Line.gif',
    title: 'Delete Line',
  },
  7: {
    imageSrc: 'Duplicate+Line+or+Selection.gif',
    title: 'Duplicate Line or Selection',
  },
  8: {
    imageSrc: 'Undo%3ARedo.gif',
    title: 'Undo/Redo',
  },
  9: {
    imageSrc: 'Start+New+Line.gif',
    title: 'Start New Line',
  },
  10: {
    imageSrc: 'Indent%3AUnindent+Line+or+Selection.gif',
    title: 'Indent/Unindent Line or Selection',
  },
};

interface IHomePageProps {
  initialCount: number;
}

const Home: NextPage<IHomePageProps> = ({ initialCount }) => {
  const [screenNumber, setScreenNumber] = useState(initialCount);
  const [formValue, setFormValue] = useState('');
  let socketClient = useRef<ReturnType<typeof io>>();

  useEffect(() => {
    fetch('/api/ws').finally(() => {
      socketClient.current = io();

      socketClient.current?.on('connect', () => {
        console.log('connected');
      });

      socketClient.current?.on(
        SocketEvent.ReceiveUpdateCount,
        (count: number) => {
          // TODO: Save value to server
          setFormValue('');
          setScreenNumber(Number(count));
        },
      );

      socketClient.current?.on('disconnect', () => {
        console.log('disconnected');
      });
    });
  }, []);

  function handleNextButtonClick() {
    const nextCount = Number(screenNumber) + 1;
    setScreenNumber(nextCount);
    socketClient.current?.emit(SocketEvent.UpdateCount, nextCount);
  }

  function handleResetButtonClick() {
    const nextCount = 1;
    setScreenNumber(nextCount);
    socketClient.current?.emit(SocketEvent.UpdateCount, nextCount);
  }

  const screenData = screenMapping[screenNumber];

  return (
    <div className={styles.container}>
      <Head>
        <title>Very hot keys</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <link rel="preconnect" href={IMAGE_HOST} />
        {Object.entries(screenMapping).map(([key, value]) => (
          <link
            key={key}
            rel="prefetch"
            href={IMAGE_HOST + value.imageSrc}
            as="image"
          />
        ))}
      </Head>

      <main className={styles.main}>
        <div>
          <Button onClick={handleNextButtonClick}>Go to the next slide</Button>
        </div>
        <br />
        <div>
          <Button onClick={handleResetButtonClick}>
            Go to the first slide
          </Button>
        </div>
        <br />
        <Slide
          id={screenNumber}
          title={screenData.title}
          subTitle={screenData.subTitle}
          imageSrc={`${IMAGE_HOST}${screenData.imageSrc}`}
          formValue={formValue}
          onFormChange={(value: FormValue) => setFormValue(value)}
        />
      </main>
    </div>
  );
};

export const getServerSideProps: GetServerSideProps<
  IHomePageProps
> = async () => {
  return {
    props: {
      initialCount: countService.getCount(),
    },
  };
};

export default Home;
